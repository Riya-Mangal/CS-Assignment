//2115079//
//Riya Mangal//
question 1:
#include <stdio.h>
#include <stdlib.h>


/* Structure of a node */
struct node {
    int data; //Data part
    struct node *next; //Address part
}*head;


/* Functions used in the program */
void createList(int n);
void reverseList();
void displayList();


int main()
{
    int n, choice;

    /*
     * Create a singly linked list of n nodes
     */
    printf("Enter the total number of nodes: ");
    scanf("%d", &n);
    createList(n);

    printf("\nData in the list \n");
    displayList();

    /*
     * Reverse the list
     */
    printf("\nPress 1 to reverse the order of singly linked list\n");
    scanf("%d", &choice);
    if(choice == 1)
    {
        reverseList();
    }

    printf("\nData in the list\n");
    displayList();

    return 0;
}


/*
 * Create a list of n nodes
 */
void createList(int n)
{
    struct node *newNode, *temp;
    int data, i;

    if(n <= 0)
    {
        printf("List size must be greater than zero.\n");
        return;
    }

    head = (struct node *)malloc(sizeof(struct node));

    /*
     * If unable to allocate memory for head node
     */
    if(head == NULL)
    {
        printf("Unable to allocate memory.");
    }
    else
    {
        /*
         * Read data of node from the user
         */
        printf("Enter the data of node 1: ");
        scanf("%d", &data);

        head->data = data; // Link the data field with data
        head->next = NULL; // Link the address field to NULL

        temp = head;

        /*
         * Create n nodes and adds to linked list
         */
        for(i=2; i<=n; i++)
        {
            newNode = (struct node *)malloc(sizeof(struct node));

            /* If memory is not allocated for newNode */
            if(newNode == NULL)
            {
                printf("Unable to allocate memory.");
                break;
            }
            else
            {
                printf("Enter the data of node %d: ", i);
                scanf("%d", &data);

                newNode->data = data; // Link the data field of newNode with data
                newNode->next = NULL; // Link the address field of newNode with NULL

                temp->next = newNode; // Link previous node i.e. temp to the newNode
                temp = temp->next;
            }
        }

        printf("SINGLY LINKED LIST CREATED SUCCESSFULLY\n");
    }
}


/*
 * Reverse the order of nodes of a singly linked list
 */
void reverseList()
{
    struct node *prevNode, *curNode;

    if(head != NULL)
    {
        prevNode = head;
        curNode = head->next;
        head = head->next;

        prevNode->next = NULL; // Make first node as last node

        while(head != NULL)
        {
            head = head->next;
            curNode->next = prevNode;

            prevNode = curNode;
            curNode = head;
        }

        head = prevNode; // Make last node as head

        printf("SUCCESSFULLY REVERSED LIST\n");
    }
}


/*
 * Display entire list
 */
void displayList()
{
    struct node *temp;

    /*
     * If the list is empty i.e. head = NULL
     */
    if(head == NULL)
    {
        printf("List is empty.");
    }
    else
    {
        temp = head;
        while(temp != NULL)
        {
            printf("Data = %d\n", temp->data); // Print the data of current node
            temp = temp->next;                 // Move to next node
        }
    }
}
question 2:
#include <stdio.h>  
#define SIZE 20  
 int array[SIZE];  // declaration of array type variable.  
int top1 = -1;  
int top2 = SIZE;  
   
//Function to push data into stack1  
void push1 (int data)  
{  
// checking the overflow condition  
  if (top1 < top2 - 1)  
  {  
      top1++;  
    array[top1] = data;  
  }  
  else  
  {  
    printf ("Stack is full");  
  }  
}  
// Function to push data into stack2  
void push2 (int data)  
{  
// checking overflow condition    
if (top1 < top2 - 1)  
  {  
    top2--;  
    array[top2] = data;   
  }  
  else  
  {  
    printf ("Stack is full..\n");  
  }  
}  
   
//Function to pop data from the Stack1  
void pop1 ()  
{  
// Checking the underflow condition   
 if (top1 >= 0)  
  {  
    int popped_element = array[top1];  
    top1--;  
     
    printf ("%d is being popped from Stack 1\n", popped_element);  
  }  
  else  
  {  
    printf ("Stack is Empty \n");  
  }  
}  
// Function to remove the element from the Stack2  
void pop2 ()  
{  
// Checking underflow condition    
if (top2 < SIZE)  
  {  
      int popped_element = array[top2];  
    top2--;  
     
    printf ("%d is being popped from Stack 1\n", popped_element);  
  }  
  else  
  {  
    printf ("Stack is Empty!\n");  
  }  
}  
   
//Functions to Print the values of Stack1  
void display_stack1 ()  
{  
  int i;  
  for (i = top1; i >= 0; --i)  
  {  
    printf ("%d ", array[i]);  
  }  
  printf ("\n");  
}  
// Function to print the values of Stack2  
void display_stack2 ()  
{  
  int i;  
  for (i = top2; i < SIZE; ++i)  
  {  
    printf ("%d ", array[i]);  
  }  
  printf ("\n");  
}  
   
int main()  
{  
  int ar[SIZE];  
  int i;  
  int num_of_ele;  
   
  printf ("We can push a total of 20 values\n");  
   
  //Number of elements pushed in stack 1 is 10  
  //Number of elements pushed in stack 2 is 10  
   
// loop to insert the elements into Stack1    
for (i = 1; i <= 10; ++i)  
  {  
    push1(i);  
    printf ("Value Pushed in Stack 1 is %d\n", i);  
  }  
// loop to insert the elements into Stack2.    
for (i = 11; i <= 20; ++i)  
  {  
    push2(i);  
    printf ("Value Pushed in Stack 2 is %d\n", i);  
  }  
   
  //Print Both Stacks  
  display_stack1 ();  
 display_stack2 ();  
   
  //Pushing on Stack Full  
  printf ("Pushing Value in Stack 1 is %d\n", 11);  
  push1 (11);  
   
  //Popping All Elements from Stack 1  
  num_of_ele = top1 + 1;  
  while (num_of_ele)  
  {  
    pop1 ();  
    --num_of_ele;  
  }  
   
  // Trying to Pop the element From the Empty Stack  
  pop1 ();  
   
  return 0;  
}  



question 7:

#include <stdio.h>
#define R 4
#define C 5
void spiralOfMatrix(int enrow, int encol, int arr1[R][C])
{
    int i, rowind = 0, colind = 0;
    while (rowind < enrow && colind < encol)
    {
        for (i = colind; i < encol; ++i)
        {
            printf("%d ", arr1[rowind][i]);
        }
        rowind++;
        for (i = rowind; i < enrow; ++i)
        {
            printf("%d ", arr1[i][encol-1]);
        }
        encol--;
        if ( rowind < enrow)
        {
            for (i = encol-1; i >= colind; --i)
            {
                printf("%d ", arr1[enrow-1][i]);
            }
            enrow--;
        }
        if (colind < encol)
        {
            for (i = enrow-1; i >= rowind; --i)
            {
                printf("%d ", arr1[i][colind]);
            }
            colind++;    
        }        
    }
}
int main()
{
int i,j;
    int arr1[R][C] = { {1,  2,  3,  4,  5},
        {6, 7,  8,  9,  10},
        {11, 12, 13, 14, 15},
        {16, 17, 18, 19, 20}
    };
 //------------- print original array ------------------	
	printf("The given array in matrix form is :  \n");
	for(i = 0; i < R; i++)
	{
	for (j=0;j<C;j++)
	{
	printf("%d  ", arr1[i][j]);
    } 
	printf("\n");
	}
//------------------------------------------------------ 	
printf("The spiral form of above matrix is: \n");	
    spiralOfMatrix(R, C, arr1);
    return 0;
}
#include <stdio.h>
#include <stdlib.h>
int main()
{
    int a[3][3]={1,2,3,4,5,6,7,8,9};
    int i,j;
    printf("Original Array\n");
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            printf("%d ",a[i][j]);
        }
        printf("\n");
    }
 printf("Rotate Matrix by 90 degrees\n");
    for(i=2;i>=0;i--)
    {
        for(j=0;j<=2;j++)
        {
            printf("%d ",a[j][i]);
        }
        printf("\n");
    }
    return 0;
}
question 11:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 
struct stack
{
    int size;
    int top;
    char *arr;
};
 
int stackTop(struct stack* sp){
    return sp->arr[sp->top];
}
 
int isEmpty(struct stack *ptr)
{
    if (ptr->top == -1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
 
int isFull(struct stack *ptr)
{
    if (ptr->top == ptr->size - 1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
 
void push(struct stack* ptr, char val){
    if(isFull(ptr)){
        printf("Stack Overflow! Cannot push %d to the stack\n", val);
    }
    else{
        ptr->top++;
        ptr->arr[ptr->top] = val;
    }
}
 
char pop(struct stack* ptr){
    if(isEmpty(ptr)){
        printf("Stack Underflow! Cannot pop from the stack\n");
        return -1;
    }
    else{
        char val = ptr->arr[ptr->top];
        ptr->top--;
        return val;
    }
}
int precedence(char ch){
    if(ch == '*' || ch=='/')
        return 3;
    else if(ch == '+' || ch=='-')
        return 2; 
    else
        return 0;
}
 
int isOperator(char ch){
    if(ch=='+' || ch=='-' ||ch=='*' || ch=='/') 
        return 1;
    else
        return 0;
}
char* infixToPostfix(char* infix){
    struct stack * sp = (struct stack *) malloc(sizeof(struct stack));
    sp->size = 10; 
    sp->top = -1;
    sp->arr = (char *) malloc(sp->size * sizeof(char));
    char * postfix = (char *) malloc((strlen(infix)+1) * sizeof(char));
    int i=0; // Track infix traversal
    int j = 0; // Track postfix addition 
    while (infix[i]!='\0')
    {
        if(!isOperator(infix[i])){
            postfix[j] = infix[i];
            j++;
            i++;
        }
        else{
            if(precedence(infix[i])> precedence(stackTop(sp))){
                push(sp, infix[i]);
                i++;
            }
            else{
                postfix[j] = pop(sp);
                j++;
            }
        }
    }
    while (!isEmpty(sp))    
    {
        postfix[j] = pop(sp);
        j++;
    }
    postfix[j] = '\0';
    return postfix;
}
int main()
{
    char * infix = "x-y/z-k*d";
    printf("postfix is %s", infixToPostfix(infix));
    return 0;
}
question 10:
// Include header file
#include <stdio.h>
#include <stdlib.h>
/*
    C program for
    Add two polynomials using linked list
*/
typedef struct Node
{
	// Define useful field of Node
	int data;
	int power;
	struct Node * next;
}Node;
Node * getNode(int data, int power)
{
	// Create dynamic memory of Node
	Node * ref = (Node * ) malloc(sizeof(Node));
	if (ref == NULL)
	{
		// Failed to create memory 
		return NULL;
	}
	ref->data = data;
	ref->power = power;
	ref->next = NULL;
	return ref;
}
// Update node value
void updateRecord(Node * ref, int data, int power)
{
	ref->data = data;
	ref->power = power;
}
typedef struct AddPolynomial
{
	// Define useful field of AddPolynomial
	struct Node * head;
}AddPolynomial;
AddPolynomial * getAddPolynomial()
{
	// Create dynamic memory of AddPolynomial
	AddPolynomial * ref = (AddPolynomial * ) malloc(sizeof(AddPolynomial));
	if (ref == NULL)
	{
		// Failed to create memory 
		return NULL;
	}
	ref->head = NULL;
	return ref;
}
// Display given polynomial nodes
void display(AddPolynomial * ref)
{
	if (ref->head == NULL)
	{
		printf("Empty Polynomial ");
	}
	printf(" ");
	Node * temp = ref->head;
	while (temp != NULL)
	{
		if (temp != ref->head)
		{
			printf(" + %d", temp->data);
		}
		else
		{
			printf("%d",temp->data);
		}
		if (temp->power != 0)
		{
			printf("x^%d", temp->power);
		}
		// Visit to next node
		temp = temp->next;
	}
	printf("\n");
}
// Add node with given data and power
void addNode(AddPolynomial * ref, int data, int power)
{
	if (ref->head == NULL)
	{
		// Add first node
		ref->head = getNode(data, power);
	}
	else
	{
		Node * node = NULL;
		Node * temp = ref->head;
		Node * location = NULL;
		// Find the valid new node location
		while (temp != NULL && 
               temp->power >= power)
		{
			location = temp;
			temp = temp->next;
		}
		if (location != NULL && 
            location->power == power)
		{
			// When polynomial power already exists
			// Then add current add to previous data
			location->data = location->data + data;
		}
		else
		{
			node = getNode(data, power);
			if (location == NULL)
			{
				// When add node in begining
				node->next = ref->head;
				ref->head = node;
			}
			else
			{
				// When adding node in intermediate
				// location or end location
				node->next = location->next;
				location->next = node;
			}
		}
	}
}
// Add two polynomial
Node * addTwoPolynomials(AddPolynomial * ref, 
                         AddPolynomial * other)
{
	// Define some useful variable
	Node * result = NULL;
	Node * tail = NULL;
	Node * node = NULL;
	// Get first node of polynomial
	Node * first = ref->head;
	Node * second = other->head;
	// Execute loop until when polynomial are exist
	// And add two polynomial. 
	// Process takes O(n) time.
	while (first != NULL || second != NULL)
	{
		// Create node with default value
		node = getNode(0, 0);
		if (result == NULL)
		{
			// When first resultant node
			result = node;
		}
		if (first != NULL && second != NULL)
		{
			if (first->power == second->power)
			{
				// When the polynomial node power are same
				updateRecord(node, first->data + second->data, 
                             first->power);
				first = first->next;
				second = second->next;
			}
			else if (first->power > second->power)
			{
				// When first polynomial power are larger
				updateRecord(node, first->data, first->power);
				first = first->next;
			}
			else
			{
				// When second polynomial power are larger
				updateRecord(node, second->data, second->power);
				second = second->next;
			}
		}
		else if (first != NULL)
		{
			// When first polynomial are not empty 
			// Update the current node information
			updateRecord(node, first->data, first->power);
			first = first->next;
		}
		else
		{
			// When second polynomial are not empty 
			updateRecord(node, second->data, second->power);
			second = second->next;
		}
		if (tail == NULL)
		{
			tail = node;
		}
		else
		{
			// Add new node at end of resultant polynomial
			tail->next = node;
			tail = node;
		}
	}
	// return first node
	return result;
}
int main()
{
	AddPolynomial * poly1 = getAddPolynomial();
	AddPolynomial * poly2 = getAddPolynomial();
	AddPolynomial * result = getAddPolynomial();
	// Add node in polynomial poly1
	addNode(poly1, 9, 3);
	addNode(poly1, 4, 2);
	addNode(poly1, 3, 0);
	addNode(poly1, 7, 1);
	addNode(poly1, 3, 4);
	// Add node in polynomial poly2
	addNode(poly2, 7, 3);
	addNode(poly2, 4, 0);
	addNode(poly2, 6, 1);
	addNode(poly2, 1, 2);
	// Display Polynomial nodes
	printf("\n Polynomial A\n");
	display(poly1);
	printf(" Polynomial B\n");
	display(poly2);
	result->head = addTwoPolynomials(poly1, poly2);
	// Display calculated result
	printf(" Result\n");
	display(result);
}
question 13:
#include <stdio.h>
#include <stdlib.h>
 
struct stack
{
    int size;
    int top;
    char *arr;
};
 
int isEmpty(struct stack *ptr)
{
    if (ptr->top == -1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
 
int isFull(struct stack *ptr)
{
    if (ptr->top == ptr->size - 1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
 
void push(struct stack* ptr, char val){
    if(isFull(ptr)){
        printf("Stack Overflow! Cannot push %d to the stack\n", val);
    }
    else{
        ptr->top++;
        ptr->arr[ptr->top] = val;
    }
}
 
char pop(struct stack* ptr){
    if(isEmpty(ptr)){
        printf("Stack Underflow! Cannot pop from the stack\n");
        return -1;
    }
    else{
        char val = ptr->arr[ptr->top];
        ptr->top--;
        return val;
    }
}
 
int parenthesisMatch(char * exp){
    // Create and initialize the stack
    struct stack* sp;
    sp->size = 100;
    sp->top = -1;
    sp->arr = (char *)malloc(sp->size * sizeof(char));
 
 
    for (int i = 0; exp[i]!='\0'; i++)
    {
        if(exp[i]=='('){
            push(sp, '(');
        }
        else if(exp[i]==')'){
            if(isEmpty(sp)){
                return 0;
            }
            pop(sp); 
        }
    }
 
    if(isEmpty(sp)){
        return 1;
    }
    else{
        return 0;
    }
    
}
int main()
{
    char * exp = "((8)(*--$$9))";
    // Check if stack is empty
    if(parenthesisMatch(exp)){
        printf("The parenthesis is matching");
    }
    else{
        printf("The parenthesis is not matching");
    }
    return 0;
}
question 12:
#include<stdio.h>
#include<string.h> 
#include<limits.h>
#include<stdlib.h>
# define MAX 100
int top = -1;
char stack[MAX];

// checking if stack is full
int isFull() {
    return top == MAX - 1;
} 

// checking is stack is empty
int isEmpty() { 
    return top == -1; 
}

// Push function here, inserts value in stack and increments stack top by 1
void push(char item) {
    if (isFull()) 
        return; 
	top++;
	stack[top] = item;
}

// Function to remove an item from stack.  It decreases top by 1 
int pop() { 
    if (isEmpty()) 
        return INT_MIN; 
        
    // decrements top and returns what has been popped      
    return stack[top--]; 
} 

// Function to return the top from stack without removing it 
int peek(){ 
    if (isEmpty()) 
        return INT_MIN; 
    return stack[top]; 
} 

// A utility function to check if the given character is operand 
int checkIfOperand(char ch) {
    return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z'); 
} 

// Fucntion to compare precedence
// If we return larger value means higher precedence 
int precedence(char ch) 
{ 
    switch (ch) 
    { 
    case '+': 
    case '-': 
        return 1; 

    case '*': 
    case '/': 
        return 2; 

    case '^': 
        return 3; 
    } 
    return -1; 
} 

// The driver function for infix to postfix conversion 
int getPostfix(char* expression) 
{ 
    int i, j;

    for (i = 0, j = -1; expression[i]; ++i) 
    { 
        // Here we are checking is the character we scanned is operand or not
        // and this adding to to output. 
        if (checkIfOperand(expression[i])) 
            expression[++j] = expression[i]; 

        // Here, if we scan character ‘(‘, we need push it to the stack. 
        else if (expression[i] == '(') 
            push(expression[i]); 

        // Here, if we scan character is an ‘)’, we need to pop and print from the stack  
        // do this until an ‘(‘ is encountered in the stack. 
        else if (expression[i] == ')') 
        { 
            while (!isEmpty(stack) && peek(stack) != '(') 
                expression[++j] = pop(stack); 
            if (!isEmpty(stack) && peek(stack) != '(') 
                return -1; // invalid expression              
            else
                pop(stack); 
        } 
        else // if an opertor
        { 
            while (!isEmpty(stack) && precedence(expression[i]) <= precedence(peek(stack))) 
                expression[++j] = pop(stack); 
            push(expression[i]); 
        } 

    } 

    // Once all inital expression characters are traversed
    // adding all left elements from stack to exp
    while (!isEmpty(stack)) 
        expression[++j] = pop(stack); 

    expression[++j] = '\0'; 
    
}

void reverse(char *exp){

    int size = strlen(exp);
    int j = size, i=0;
    char temp[size];

    temp[j--]='\0';
    while(exp[i]!='\0')
    {
        temp[j] = exp[i];
        j--;
        i++;
    }
    strcpy(exp,temp);
}
void brackets(char* exp){
    int i = 0;
    while(exp[i]!='\0')
    {
        if(exp[i]=='(')
            exp[i]=')';
        else if(exp[i]==')')
            exp[i]='(';
        i++;
    }
}
void InfixtoPrefix(char *exp){

    int size = strlen(exp);

    // reverse string
    reverse(exp);
    //change brackets
    brackets(exp);
    //get postfix
    getPostfix(exp);
    // reverse string again
    reverse(exp);
}

int main()
{    
    printf("The infix is: ");

    char expression[] = "((a/b)+c)-(d+(e*f))"; 
    printf("%s\n",expression);
    InfixtoPrefix(expression); 

    printf("The prefix is: ");
    printf("%s\n",expression);

    return 0; 
}

question 4:
#include<stdio.h>  
#define N 5  
int stack1[5], stack2[5]; // declaration of two stacks  
// declaration of top variables.  
int top1=-1, top2=-1;   
int count=0;  
// inserting the elements in stack1.  
void push1(int data)  
{  
// Condition to check whether the stack1 is full or not.    
 if(top1==N-1)  
{  
   printf("\n Stack is overflow...");  
}  
else  
{  
   top1++;   // Incrementing the value of top1  
   stack1[top1]=data;  // pushing the data into stack1  
}  
}  
// Removing the elements from the stack1.  
int pop1()  
{  
// Condition to check whether the stack1 is empty or not.    
if(top1==-1)  
{  
   printf("\nStack is empty..");  
}  
else  
{  
   int a=stack1[top1];  // Assigning the topmost value of stack1 to 'a' variable.   
   top1--;  // decrementing the value of top1.  
   return a;   
}  
}   
// pushing the data into the stack2.  
void push2(int x)  
{  
//  Condition to check whether the stack2 is full or not  
if(top2==N-1)  
{  
   printf("\nStack is full..");  
}  
else  
{  
    top2++;   // incrementing the value of top2.  
    stack2[top2]=x;  // assigning the 'x' value to the Stack2  
  
}  
}   
// Removing the elements from the Stack2  
int pop2()  
{  
   int element = stack2[top2];  // assigning the topmost value to element  
   top2--;  // decrement the value of top2  
   return element;  
}   
void enqueue(int x)  
{  
    push1(x);  
    count++;  
}  
void dequeue()  
{  
   if((top1==-1) && (top2==-1))  
{  
   printf("\nQueue is empty");  
}  
else  
{  
  for(int i=0;i<count;i++)  
  {  
     int element = pop1();  
     push2(element);  
  }  
int b= pop2();  
printf("\nThe dequeued element is %d", b);  
printf("\n");  
count--;  
for(int i=0;i<count;i++)  
{  
   int a = pop2();  
   push1(a);   
}  
}}   
void display()  
{  
   for(int i=0;i<=top1;i++)  
  {  
     printf("%d , ", stack1[i]);  
  }  
}  
void main()  
{  
   enqueue(10);  
   enqueue(20);  
   enqueue(30);  
   dequeue();  
   enqueue(40);  
   display();  
}  
question 15:
#include <stdio.h>
#include <stdlib.h>

static int longest_valid_parentheses(char* parentheses_str)
{
    int cap = 8000, error = -1;
    int length = 0, max_length = 0;
    char *p = parentheses_str;
    int *pstack = malloc(cap * sizeof(int));
    int *top = pstack;

    while (*p != '\0') {
        if (*p == '(') {
            if (top + 1 - pstack >= cap) {
                cap *= 2;
                pstack = realloc(pstack, cap * sizeof(int));
            }
            *top++ = p - parentheses_str;
        } else {
            if (top > pstack) {
                if (--top == pstack) {
                     length = p - (parentheses_str + error);
                } else {
                    length = p - (parentheses_str + *(top - 1));
                }
                if (length > max_length) {
                    max_length = length;
                }
            } else {
                error = p - parentheses_str;
            }
        }
        p++;
    }
    return max_length;
}

int main(void)
 {
    char main_str[] = "(()))";
	printf("\nOriginal Parentheses string: %s", main_str);
	printf("\nLength of longest parentheses: %d", longest_valid_parentheses(main_str));
    return 0;
 }


